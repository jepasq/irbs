							-*-org-*-

* v1.0.0
** v0.1.0
*** v0.0.1
**** Work on the representation parser
:LOGBOOK:
CLOCK: [2023-08-02 mer. 06:51]--[2023-08-02 mer. 07:02] =>  0:11
:END:
- [ ] Fiest tests in examples/001_app
- [ ] Could be find if it works as (return should be implicite)
#+BEGIN_EXAMPLE
    def to_s
      "
      Here is the returned content.
      And here, a #{variable} content!
      "
    end
#+END_EXAMPLE
And test for HEREDOC or %q() see https://medium.com/modern-learner/multiline-strings-in-ruby-8dcfa87bfb26
- [ ] If #{varname} found, print this field value. Normal way for ruby.
  Does it work for functions ?
- [ ] if #funcname found, run this function from 
**** Handle Unit tests and API documentation
- [ ] Maybe based on RSpec
  - [ ] Main script can be found, is executable and return an error status code
    when called on an inexisting dir
- [ ] From test/ directory. Add a Makefile rule for that
  
**** Start to implement examples andd associated unit tests
:LOGBOOK:
CLOCK: [2023-08-11 ven. 03:30]--[2023-08-11 ven. 04:10] =>  0:40
CLOCK: [2023-08-10 jeu. 04:00]--[2023-08-10 jeu. 04:36] =>  0:36
CLOCK: [2023-08-10 jeu. 03:37]--[2023-08-10 jeu. 03:55] =>  0:18
CLOCK: [2023-08-09 mer. 06:42]--[2023-08-09 mer. 07:13] =>  0:31
CLOCK: [2023-08-03 jeu. 03:34]--[2023-08-03 jeu. 03:50] =>  0:16
CLOCK: [2023-08-03 jeu. 03:17]--[2023-08-03 jeu. 03:29] =>  0:12
:END:
- [X] Must have a -n,--non-interactive and  -e --endpoint='/' arguments
- [X] Maybe create the Server class with interactive and endpoint vars
- [X] examples/001_app work
  Must use routes to show Application content
- [ ] May define favicon with DSL
  Add =<link rel="icon" type="image/vnd.icon" href="checmin.ico">=
  type can be image/png or image/gif according to the extension
  - [ ] Check if the file can be found
- [ ] How to define page title in class ?    
- [ ] How to handle endpoint argument : now test it
- [ ] Add rspec for example_001
**** TODO Open a web server based on a DSL-based ruby configuration file (2)
:LOGBOOK:
CLOCK: [2023-08-09 mer. 05:59]--[2023-08-09 mer. 06:33] =>  0:34
:END:
- [ ] Fix actual unit tests error
- [ ] -?, -h or --help may print a usage message
- [ ] Must have an option to print page to stdout for test purpose
- [ ] Test that usage text contains appname and version    
- [ ] The main entry file could be a ruby-based DSL to configure server
  host, port etc...
  see https://www.paweldabrowski.com/articles/building-dsl-with-ruby
- [ ] Open our own webserver
  https://www.rubyguides.com/2016/08/build-your-own-web-server/
- [ ] First tests go in examples/{name}/ directory
  Unit tests may be based on this examples and the main script return value
**** TODO Correct project handling
:LOGBOOK:
CLOCK: [2023-07-21 ven. 15:22]--[2023-07-21 ven. 15:30] =>  0:08
:END:
- [X] github should run CI
- [ ] Make this project's github repo public
**** DONE Open a web server based on a DSL-based ruby configuration file (1)
:LOGBOOK:
CLOCK: [2023-08-08 mar. 01:29]--[2023-08-08 mar. 01:48] =>  0:19
CLOCK: [2023-08-07 lun. 05:27]--[2023-08-07 lun. 05:47] =>  0:20
CLOCK: [2023-08-07 lun. 03:09]--[2023-08-07 lun. 03:27] =>  0:18
CLOCK: [2023-08-04 ven. 01:59]--[2023-08-04 ven. 02:14] =>  0:15
CLOCK: [2023-08-04 ven. 01:02]--[2023-08-04 ven. 01:21] =>  0:19
CLOCK: [2023-08-02 mer. 02:58]--[2023-08-02 mer. 03:22] =>  0:24
CLOCK: [2023-08-02 mer. 02:42]--[2023-08-02 mer. 02:52] =>  0:10
CLOCK: [2023-08-01 mar. 02:44]--[2023-08-01 mar. 03:14] =>  0:30
CLOCK: [2023-08-01 mar. 01:48]--[2023-08-01 mar. 02:05] =>  0:17
CLOCK: [2023-07-31 lun. 00:42]--[2023-07-31 lun. 00:57] =>  0:15
CLOCK: [2023-07-20 jeu. 13:27]--[2023-07-20 jeu. 14:00] =>  0:33
CLOCK: [2023-07-20 jeu. 12:03]--[2023-07-20 jeu. 12:21] =>  0:18
CLOCK: [2023-07-20 jeu. 11:10]--[2023-07-20 jeu. 11:40] =>  0:30
CLOCK: [2023-07-20 jeu. 10:45]--[2023-07-20 jeu. 11:03] =>  0:18
CLOCK: [2023-07-19 mer. 05:18]--[2023-07-19 mer. 05:37] =>  0:19
CLOCK: [2023-07-18 mar. 13:17]--[2023-07-18 mar. 13:24] =>  0:07
CLOCK: [2023-07-18 mar. 12:43]--[2023-07-18 mar. 12:58] =>  0:15
CLOCK: [2023-07-18 mar. 12:30]--[2023-07-18 mar. 12:37] =>  0:07
CLOCK: [2023-07-18 mar. 11:55]--[2023-07-18 mar. 12:14] =>  0:19
:END:
Based on a static generator tool but to a fully REST server

- [X] Main script is in src/
- [X] Add a Makefile with an install rule
- [X] If more that 1 arg, error  
- [X] Should accept project dir as arg or use pwd if not used
- [X] If first arg is not a directory or doesn't exist, raise
- [X] Start argument handling function
  - [X] Add an argument.rb file and class
  - [X] An argument is a command with help text and an action block and
    possibly aliases
  - [X] Must be able to print all options with help text (for usage)
  - [X] Must consume encountered options from ARGV list to let raise an
    error for unrecognized option
- [X] When consuming options, should only keep the ones starting with '-'
- [X] Add an Argument function that returns arguments minux options with leading
  dash
- [X] Must find a way to handle '-' starting option and raise an
  exception if not handled
- [X] Default opened page/class may be Home or Root but must be configurable
- [X] May create help/usage callback later
