							-*-org-*-

* v1.0.0
** v0.1.0
*** TODO v0.0.2
**** Work on the representation parser
:LOGBOOK:
CLOCK: [2023-08-18 ven. 03:20]--[2023-08-18 ven. 03:35] =>  0:15
CLOCK: [2023-08-17 jeu. 04:41]--[2023-08-17 jeu. 04:55] =>  0:14
CLOCK: [2023-08-17 jeu. 04:17]--[2023-08-17 jeu. 04:25] =>  0:08
CLOCK: [2023-08-02 mer. 06:51]--[2023-08-02 mer. 07:02] =>  0:11
:END:
- [X] First tests in examples/001_app
- [ ] Then, nested object in examples/002_nested
  Tested, waiting for non-interactive mode
- [ ] How to handle nester object with constructor
- [ ] How to handle page title ?
  A simple title return function
- [ ] Could be find if it works as (return should be implicite)
#+BEGIN_EXAMPLE
    def to_s
      "
      Here is the returned content.
      And here, a #{variable} content!
      "
    end
#+END_EXAMPLE
And test for HEREDOC or %q() see https://medium.com/modern-learner/multiline-strings-in-ruby-8dcfa87bfb26
- [ ] If #{varname} found, print this field value. Normal way for ruby.
  Does it work for functions ?
- [ ] if #funcname found, run this function from 
**** TODO Open a web server based on a DSL-based ruby configuration file (2)
:LOGBOOK:
CLOCK: [2023-08-29 mar. 07:00]--[2023-08-29 mar. 07:13] =>  0:13
CLOCK: [2023-08-29 mar. 06:10]--[2023-08-29 mar. 06:40] =>  0:30
CLOCK: [2023-08-16 mer. 03:45]--[2023-08-16 mer. 04:05] =>  0:20
CLOCK: [2023-08-09 mer. 05:59]--[2023-08-09 mer. 06:33] =>  0:34
:END:
- [-] Fix actual unit tests error dur to non-inreactive server running
  - [X] We still have an issue with =./src/irbs -n examples/001_app
    *WARN: can't get classname from slur 'root'* trying to load =.rb= file
  - [ ] =rspec ./tests/main.rspec:31=
- [ ] -?, -h or --help may print a usage message
- [ ] Must have an option to print page to stdout for test purpose
- [ ] Test that usage text contains appname and version    
- [ ] The main entry file could be a ruby-based DSL to configure server
  host, port etc...
- [ ] Open our own webserver
  https://www.rubyguides.com/2016/08/build-your-own-web-server/
- [ ] First tests go in examples/{name}/ directory
  Unit tests may be based on this examples and the main script return value
**** Occasionally call =bundle update=
:LOGBOOK:
CLOCK: [2024-03-13 mer. 01:59]--[2024-03-13 mer. 02:03] =>  0:04
CLOCK: [2024-02-29 jeu. 06:59]--[2024-02-29 jeu. 07:01] =>  0:02
CLOCK: [2024-01-10 mer. 16:09]--[2024-01-10 mer. 16:16] =>  0:07
:END:
- Last call (date and updates)
| 10 Jan. 2024 | mime-types (3.5 -> 3.5.2) and -data      |
| 29 Feb. 2024 | mime-types-data and rspec* (3.12 -> 3.13) |
| 13 Mar. 2024 | mime-types-data (.0206 -> .0305)         |
**** TODO Continue Unit tests and API documentation
:LOGBOOK:
CLOCK: [2024-03-25 lun. 13:13]--[2024-03-25 lun. 13:27] =>  0:14
CLOCK: [2024-03-25 lun. 07:16]--[2024-03-25 lun. 07:33] =>  0:17
CLOCK: [2024-01-10 mer. 15:26]--[2024-01-10 mer. 16:03] =>  0:37
:END:
- [X] Should redirect error output to /dev/null when running test
- [ ] Testing API doc generation with yard
  =yard stats --list-undoc= for undocumented members
  =yard doc src=
  =open doc/index.html=
  or
  =yard server --reload=
  - [ ] Can we add a mainpage (to add the header group in config_parser for ex.)
    Actually using the repo's README page
**** TODO Fix ARGV issue in main script
:LOGBOOK:
CLOCK: [2024-04-05 ven. 10:55]--[2024-04-05 ven. 11:09] =>  0:14
CLOCK: [2024-04-05 ven. 07:16]--[2024-04-05 ven. 07:38] =>  0:22
CLOCK: [2024-03-25 lun. 09:05]--[2024-03-25 lun. 09:19] =>  0:14
CLOCK: [2024-03-13 mer. 03:48]--[2024-03-13 mer. 04:30] =>  0:42
CLOCK: [2024-02-29 jeu. 07:23]--[2024-02-29 jeu. 07:29] =>  0:06
CLOCK: [2024-02-29 jeu. 06:23]--[2024-02-29 jeu. 06:40] =>  0:17
CLOCK: [2024-02-29 jeu. 05:36]--[2024-02-29 jeu. 05:43] =>  0:07
CLOCK: [2024-02-12 lun. 02:37]--[2024-02-12 lun. 03:42] =>  1:05
CLOCK: [2024-01-30 mar. 15:59]--[2024-01-30 mar. 16:18] =>  0:19
CLOCK: [2024-01-19 ven. 17:55]--[2024-01-19 ven. 18:11] =>  0:16
CLOCK: [2024-01-19 ven. 17:25]--[2024-01-19 ven. 17:32] =>  0:07
:END:

- [X] Tests now try to use =bundle exec=
  Actually =make check= causes 7 failures
  =bundle exec rspec -I src/ ./tests/main.rspec:22=
- [X] 004_favicon example fails to parse irbs/config.rb
  =Failed to parse= seems to be from port
  arg.only_dirs(ARGV) in irbs main script seems to fail
  - [X] Check Argument class tests : no, ARGV is already empty here
  - [X] Try to write a unit test for this
- [X] Why ConfigParser doesn't use attr_accessor for title ? explained
- [X] 004_favicon have the favicon link item but in header and not in head
- [X] Can we make the main script non-executable to make sure it is called
  with bundle exec (must change main unit test if so). No, it must be executable
- [X] Add rspec for example_001
- [X] May create config_parser unit test :  Started
  
- [ ] Find how to implement Class with all attributes, as a hash for exemple
- [ ] It's not clear why the 003 example, for example, has a main class file
  named 'Application' where all other files will be named in snake case ?
- [ ] We have an =raise_if_unknown_arg= error when running irbs manually
  with the list of implemented options, maybe an array error
- [ ] How to handle endpoint argument : now test it
**** DONE Handle Unit tests and API documentation
:LOGBOOK:
CLOCK: [2023-12-15 ven. 08:53]--[2023-12-15 ven. 09:31] =>  0:38
CLOCK: [2023-10-09 lun. 02:42]--[2023-10-09 lun. 02:48] =>  0:06
CLOCK: [2023-10-06 ven. 06:26]--[2023-10-06 ven. 06:58] =>  0:32
CLOCK: [2023-10-03 mar. 06:24]--[2023-10-03 mar. 06:48] =>  0:24
CLOCK: [2023-10-02 lun. 11:13]--[2023-10-02 lun. 11:37] =>  0:24
CLOCK: [2023-09-21 jeu. 09:50]--[2023-09-21 jeu. 10:39] =>  0:49
CLOCK: [2023-09-19 mar. 11:42]--[2023-09-19 mar. 11:57] =>  0:15
CLOCK: [2023-09-01 ven. 07:56]--[2023-09-01 ven. 08:07] =>  0:11
CLOCK: [2023-08-24 jeu. 04:19]--[2023-08-24 jeu. 04:30] =>  0:11
CLOCK: [2023-08-23 mer. 05:23]--[2023-08-23 mer. 05:36] =>  0:13
CLOCK: [2023-08-15 mar. 06:26]--[2023-08-15 mar. 06:58] =>  0:32
:END:
- [X] The non-interactive option must work
  - [X] Must fix the Argument#consume unit test
- [X] Maybe based on RSpec
  - [X] Main script can be found, is executable and return an error status code
    when called on an inexisting dir
- [X] From test/ directory. Add a Makefile rule for that
- [X] examples/002_nested.rspec
  It doesn't show Sidebar class representation
- [X] ./tests/examples/003_title.rspec:17
  Working on it in a dedicated fix branch
  Even if title= is misspelled, we have no error
  see back https://www.paweldabrowski.com/articles/building-dsl-with-ruby
  I don(t think we must have '=' char
*** DONE v0.0.1
**** DONE Group class implementation and usage for header/favicon
:LOGBOOK:
CLOCK: [2023-12-15 ven. 08:14]--[2023-12-15 ven. 08:43] =>  0:29
CLOCK: [2023-12-15 ven. 07:10]--[2023-12-15 ven. 07:42] =>  0:32
CLOCK: [2023-11-30 jeu. 05:50]--[2023-11-30 jeu. 06:50] =>  1:00
CLOCK: [2023-11-22 mer. 02:45]--[2023-11-22 mer. 02:54] =>  0:09
CLOCK: [2023-11-07 mar. 02:44]--[2023-11-07 mar. 03:05] =>  0:21
CLOCK: [2023-10-30 lun. 05:13]--[2023-10-30 lun. 05:22] =>  0:09
CLOCK: [2023-10-18 mer. 04:09]--[2023-10-18 mer. 04:18] =>  0:09
CLOCK: [2023-10-12 jeu. 05:02]--[2023-10-12 jeu. 05:08] =>  0:06
CLOCK: [2023-10-12 jeu. 03:38]--[2023-10-12 jeu. 04:05] =>  0:27
:END:
- [X] src/irbs must be ran through bundler : check that
  https://stackoverflow.com/a/31359866
- [X] =WARNING: Using `expect { }.not_to raise_error(SpecificErrorClass)= ...
  nstead consider using `expect { }.not_to raise_error` or `expect { }.to
  raise_error(DifferentSpecificErrorClass)`
- [X] May define favicon with DSL
  Add =<link rel="icon" type="image/vnd.icon" href="checmin.ico">=
  type can be image/png or image/gif according to the extension
  - [X] Check if the file can be found
  - [X] Add a unit test for the created <link> markup  
- [X] Maybe we need a Group class (to be used as header)
  With a tagname and a list of subitems
  - As a subclass of array ?
- [X] Only print group if children array is non-empty
- [X] Implement header Group to add favicon text
  Added in config_reader, to be used globally (on every page of a site)

**** DONE Start to implement Parser class
:LOGBOOK:
CLOCK: [2023-09-18 lun. 10:09]--[2023-09-18 lun. 10:30] =>  0:21
CLOCK: [2023-09-18 lun. 09:50]--[2023-09-18 lun. 10:05] =>  0:15
CLOCK: [2023-09-18 lun. 09:27]--[2023-09-18 lun. 09:44] =>  0:17
CLOCK: [2023-09-14 jeu. 09:44]--[2023-09-14 jeu. 10:23] =>  0:39
CLOCK: [2023-09-13 mer. 11:32]--[2023-09-13 mer. 11:43] =>  0:11
CLOCK: [2023-09-13 mer. 11:11]--[2023-09-13 mer. 11:16] =>  0:05
CLOCK: [2023-09-12 mar. 07:36]--[2023-09-12 mar. 07:58] =>  0:22
CLOCK: [2023-09-12 mar. 06:56]--[2023-09-12 mar. 07:11] =>  0:15
CLOCK: [2023-09-11 lun. 06:23]--[2023-09-11 lun. 06:42] =>  0:19
CLOCK: [2023-09-11 lun. 05:38]--[2023-09-11 lun. 05:41] =>  0:03
CLOCK: [2023-09-06 mer. 07:48]--[2023-09-06 mer. 08:07] =>  0:19
:END:
- [X] Add a Parser class used to parse the to_s returned string
  - [X] #extract_class returns an array of class name
    Now we have the issue that parser doesn't know about loadable classes
    to load them and use to_s
  - [X] Maybe pass the directory as parameter of Parser's ctor or #parse
  - [X] Then a fixtures/parser/00{x_description} directory containing testable
    situations
  - [X] Finally, a parser#handle_classes methode that takes the array from
    extract_classes and for each found class, instanciate it and replace
    its representation in the string
- [X] Trying to fix *tests/argument.rspec:38* failing unit test
  =bundle exec rspec -I src/ ./tests/argument.rspec:38=
- [X] Add handle for Class name  ==[A-Z][a-z0-9A-Z]*=
  Maybe uses an erb parser here ? Using the ERB class from stdlib ?
  https://ruby-doc.org/stdlib-3.0.3/libdoc/erb/rdoc/ERB.html
  - Add it before or after extracting classes ?
    Before I think, so we can generate and dynaimcally create =Classname   
- [X] Help command should use column or fixed width
  There's no space between options and their descriptions
  - First, compute max width then, use full_text argument
  
**** DONE Start to implement examples and associated unit tests
:LOGBOOK:
CLOCK: [2023-09-04 lun. 09:42]--[2023-09-04 lun. 09:52] =>  0:10
CLOCK: [2023-09-04 lun. 08:28]--[2023-09-04 lun. 08:46] =>  0:18
CLOCK: [2023-09-01 ven. 05:31]--[2023-09-01 ven. 06:22] =>  0:51
CLOCK: [2023-08-31 jeu. 05:34]--[2023-08-31 jeu. 05:39] =>  0:05
CLOCK: [2023-08-28 lun. 06:25]--[2023-08-28 lun. 06:34] =>  0:09
CLOCK: [2023-08-28 lun. 03:47]--[2023-08-28 lun. 03:55] =>  0:08
CLOCK: [2023-08-24 jeu. 03:27]--[2023-08-24 jeu. 03:54] =>  0:27
CLOCK: [2023-08-23 mer. 02:13]--[2023-08-23 mer. 02:37] =>  0:24
CLOCK: [2023-08-22 mar. 07:15]--[2023-08-22 mar. 07:49] =>  0:34
CLOCK: [2023-08-22 mar. 02:42]--[2023-08-22 mar. 03:49] =>  1:07
CLOCK: [2023-08-21 lun. 01:47]--[2023-08-21 lun. 02:08] =>  0:21
CLOCK: [2023-08-18 ven. 02:34]--[2023-08-18 ven. 03:01] =>  0:27
CLOCK: [2023-08-16 mer. 04:41]--[2023-08-16 mer. 05:01] =>  0:20
CLOCK: [2023-08-15 mar. 05:20]--[2023-08-15 mar. 06:08] =>  0:48
CLOCK: [2023-08-11 ven. 07:53]--[2023-08-11 ven. 08:20] =>  0:27
CLOCK: [2023-08-11 ven. 03:30]--[2023-08-11 ven. 04:10] =>  0:40
CLOCK: [2023-08-10 jeu. 04:00]--[2023-08-10 jeu. 04:36] =>  0:36
CLOCK: [2023-08-10 jeu. 03:37]--[2023-08-10 jeu. 03:55] =>  0:18
CLOCK: [2023-08-09 mer. 06:42]--[2023-08-09 mer. 07:13] =>  0:31
CLOCK: [2023-08-03 jeu. 03:34]--[2023-08-03 jeu. 03:50] =>  0:16
CLOCK: [2023-08-03 jeu. 03:17]--[2023-08-03 jeu. 03:29] =>  0:12
:END:
- [X] Maybe create the Server class with interactive and endpoint vars
- [X] examples/001_app work
  Must use routes to show Application content
- [X] Implement Argument#fire_if for an array argument
- [X] May move argument_option in another file (source and rspec)
- [X] Must have a -n,--non-interactive and  -e --endpoint='/' arguments
  - [X] The =-n,--non-interactive= option must work
    Currently, examples/001_App is broking unit tests (listening to the port)
    So we're testing in tests/argument.rspec
    =bundle exec rspec -I src/ tests/argument.rspec=
  - [X] Next one is =bundle exec rspec -I src/ tests/argument.rspec:54=
- [X] How to define page title in class
  - [X] Add a example for this and unit test (we need non-interactive here)
  - [X] Must implement conf parser function for this

**** DONE Correct project handling
:LOGBOOK:
CLOCK: [2023-07-21 ven. 15:22]--[2023-07-21 ven. 15:30] =>  0:08
:END:
- [X] github should run CI
- [X] Make this project's github repo public
**** DONE Open a web server based on a DSL-based ruby configuration file (1)
:LOGBOOK:
CLOCK: [2023-08-08 mar. 01:29]--[2023-08-08 mar. 01:48] =>  0:19
CLOCK: [2023-08-07 lun. 05:27]--[2023-08-07 lun. 05:47] =>  0:20
CLOCK: [2023-08-07 lun. 03:09]--[2023-08-07 lun. 03:27] =>  0:18
CLOCK: [2023-08-04 ven. 01:59]--[2023-08-04 ven. 02:14] =>  0:15
CLOCK: [2023-08-04 ven. 01:02]--[2023-08-04 ven. 01:21] =>  0:19
CLOCK: [2023-08-02 mer. 02:58]--[2023-08-02 mer. 03:22] =>  0:24
CLOCK: [2023-08-02 mer. 02:42]--[2023-08-02 mer. 02:52] =>  0:10
CLOCK: [2023-08-01 mar. 02:44]--[2023-08-01 mar. 03:14] =>  0:30
CLOCK: [2023-08-01 mar. 01:48]--[2023-08-01 mar. 02:05] =>  0:17
CLOCK: [2023-07-31 lun. 00:42]--[2023-07-31 lun. 00:57] =>  0:15
CLOCK: [2023-07-20 jeu. 13:27]--[2023-07-20 jeu. 14:00] =>  0:33
CLOCK: [2023-07-20 jeu. 12:03]--[2023-07-20 jeu. 12:21] =>  0:18
CLOCK: [2023-07-20 jeu. 11:10]--[2023-07-20 jeu. 11:40] =>  0:30
CLOCK: [2023-07-20 jeu. 10:45]--[2023-07-20 jeu. 11:03] =>  0:18
CLOCK: [2023-07-19 mer. 05:18]--[2023-07-19 mer. 05:37] =>  0:19
CLOCK: [2023-07-18 mar. 13:17]--[2023-07-18 mar. 13:24] =>  0:07
CLOCK: [2023-07-18 mar. 12:43]--[2023-07-18 mar. 12:58] =>  0:15
CLOCK: [2023-07-18 mar. 12:30]--[2023-07-18 mar. 12:37] =>  0:07
CLOCK: [2023-07-18 mar. 11:55]--[2023-07-18 mar. 12:14] =>  0:19
:END:
Based on a static generator tool but to a fully REST server

- [X] Main script is in src/
- [X] Add a Makefile with an install rule
- [X] If more that 1 arg, error  
- [X] Should accept project dir as arg or use pwd if not used
- [X] If first arg is not a directory or doesn't exist, raise
- [X] Start argument handling function
  - [X] Add an argument.rb file and class
  - [X] An argument is a command with help text and an action block and
    possibly aliases
  - [X] Must be able to print all options with help text (for usage)
  - [X] Must consume encountered options from ARGV list to let raise an
    error for unrecognized option
- [X] When consuming options, should only keep the ones starting with '-'
- [X] Add an Argument function that returns arguments minux options with leading
  dash
- [X] Must find a way to handle '-' starting option and raise an
  exception if not handled
- [X] Default opened page/class may be Home or Root but must be configurable
- [X] May create help/usage callback later
