#                                          -*-ruby-*-

require 'parser'

describe Parser do
  it "ctor takes a directory argument" do
    expect { 
      p = Parser.new "directory_parameter/"
    }.to not_raise_error   # Could be ArgumentError
  end

  it "has a directory reader" do
    dir = "directory_parameter/"
    p = Parser.new(dir)
    expect( p.directory ).to eq(dir)
  end
  
  it "has a parse function" do
    p = Parser.new
    expect(p.parse("String")).to be_a String
  end

  it "should only parse string parameter" do
    p = Parser.new
    expect { p.parse(120)    }.to raise_error(ArgumentError)
    expect { p.parse(120.23) }.to raise_error(ArgumentError)
    expect { p.parse([])     }.to raise_error(ArgumentError)
  end

  it "should handle 001_class representation" do
    p = Parser.new("../fixtures/parser/001_class")
    expect(p.handle_classes("=Sidebar")).to eq("S1d3b4r") # Simplest replace
    # Must keep oter letter (here, a space)
    expect(p.handle_classes("=Sidebar =Sidebar")).to eq("S1d3b4r S1d3b4r")

    # Doesn't expand
    expect(p.handle_classes("=sidebar")).to eq("=sidebar")
    expect(p.handle_classes("Sidebar")).to eq("Sidebar")
  end
  
  it "should have a REGEX_CLASS member that match Classes names" do
    expect("=Aze").to     match(Parser::REGEX_CLASS)
    expect("=aze").to_not match(Parser::REGEX_CLASS)
    expect("=123").to_not match(Parser::REGEX_CLASS)
  end

  it "should have a extract_classes function" do
    # extract_classes should return an Array containing class names
    p = Parser.new
    c = p.extract_classes("=Aze    =Crl     =Ser")
    expect( c.is_a? Array ).to equal(true)
    expect( c.size ).to equal(3)
    expect( c[0] ).to   eq("Aze")
  end
end
