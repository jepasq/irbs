#                                          -*-ruby-*-

# The main script location
$script_file='src/irbs'
$script="bundle exec #{$script_file}"

def exec_script(args)
  output = `#{$script} args` #bundle exec
  return output, $?
end

# Check if this script is correctly called from root sir
unless Dir.pwd.end_with? "irbs"
  raise "Specs must be called from root directory. Please use `make check'"
end

# Just a fake, dummy class
class MainScript 
end  

describe MainScript do
  it "exists" do
    expect(File.exist?($script_file)).to be true
  end
  
  it "is executable" do
    expect(File.executable?($script_file)).to be true
  end

  it "more than 1 arg produces error status code" do
    # The '2>&1' trick is here to redirect stderr to stdout and finally
    # have a quit output in tests
    output, st = exec_script("arg1 arg2 2>&1")
    expect(st.success?).to be false
  end

  it "directory argument should exist" do
    # Can't test Exception raising here because script is executed via shell
    output, st = exec_script("examples/thisDirectoryWontExist 2>&1")
    expect(st.success?).to be false

    output, st = exec_script("--non-interactive examples/001_app 2>&1")
    expect(st.success?).to be true
  end

  it "has a usage option" do
    output, _ = exec_script("--help")
    p output
    expect(output.include? "usage").to be true

    output, _ = exec_script("-h")
    expect(output.include? "usage").to be true
    output, _ = exec_script("-?")
    expect(output.include? "usage").to be true

    _, st = exec_script("-h")
    expect(st.success?).to be true
  end

  # This one is not yet failing because it test options as a directory
  it "raises an exception if option doesn't exist" do
    _, st = exec_script("--thisOptionDoesntExist")
    expect(st.success?).to be false
  end

  it "raises an exception if option doesn't exist" do
    output, st = exec_script("--thisOptionDoesntExist")
    expect($?.success?).to be false
  end
  
end
